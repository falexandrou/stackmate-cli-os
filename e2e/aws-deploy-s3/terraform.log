
[0m[1mInitializing the backend...[0m
[0m[0m[1mBackend configuration changed![0m

Terraform has detected that the configuration specified for the backend
has changed. Terraform will now check for existing state in the backends.
[0m
[0m[32m
Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.[0m

[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.25.0

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
main.tftest.hcl... [37min progress[0m
[0m  run "end-to-end"... [32mpass[0m[0m

# data.aws_caller_identity.aws_provider_1_account_id:
data "aws_caller_identity" "aws_provider_1_account_id" {
    account_id = "827160314823"
    arn        = "arn:aws:sts::827160314823:assumed-role/StackmateEngineTestsRunner/aws-go-sdk-1700407310123615000"
    id         = "827160314823"
    user_id    = "AROA4BFUYYPDZXP6PM6RM:aws-go-sdk-1700407310123615000"
}

# data.aws_iam_policy_document.aws_objectstore_1_policy_document:
data "aws_iam_policy_document" "aws_objectstore_1_policy_document" {
    id      = "1578046606"
    json    = jsonencode(
        {
            Statement = [
                {
                    Action   = "s3:ListBucket"
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:s3:::stackmate-e2e-bucket-test-2",
                        "arn:aws:s3:::stackmate-e2e-bucket-test-1",
                    ]
                    Sid      = "ListObjectsInBucket"
                },
                {
                    Action   = "s3:*Object"
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:s3:::stackmate-e2e-bucket-test-2/*",
                        "arn:aws:s3:::stackmate-e2e-bucket-test-1/*",
                    ]
                    Sid      = "AllObjectActions"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version = "2012-10-17"

    statement {
        actions       = [
            "s3:ListBucket",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:s3:::stackmate-e2e-bucket-test-1",
            "arn:aws:s3:::stackmate-e2e-bucket-test-2",
        ]
        sid           = "ListObjectsInBucket"
    }
    statement {
        actions       = [
            "s3:*Object",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:s3:::stackmate-e2e-bucket-test-1/*",
            "arn:aws:s3:::stackmate-e2e-bucket-test-2/*",
        ]
        sid           = "AllObjectActions"
    }
}

# aws_iam_policy.aws_objectstore_1_policy:
resource "aws_iam_policy" "aws_objectstore_1_policy" {
    arn         = "arn:aws:iam::827160314823:policy/AwsObjectstore1S3Policy"
    description = "S3 User Policy"
    id          = "arn:aws:iam::827160314823:policy/AwsObjectstore1S3Policy"
    name        = "AwsObjectstore1S3Policy"
    path        = "/"
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = "s3:ListBucket"
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:s3:::stackmate-e2e-bucket-test-2",
                        "arn:aws:s3:::stackmate-e2e-bucket-test-1",
                    ]
                    Sid      = "ListObjectsInBucket"
                },
                {
                    Action   = "s3:*Object"
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:s3:::stackmate-e2e-bucket-test-2/*",
                        "arn:aws:s3:::stackmate-e2e-bucket-test-1/*",
                    ]
                    Sid      = "AllObjectActions"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id   = "ANPA4BFUYYPD45GPJ6GGI"
    tags_all    = {}
}

# aws_iam_user.aws_objectstore_1_user:
resource "aws_iam_user" "aws_objectstore_1_user" {
    arn           = "arn:aws:iam::827160314823:user/StackmateAwsObjectstore1StorageUser"
    force_destroy = false
    id            = "StackmateAwsObjectstore1StorageUser"
    name          = "StackmateAwsObjectstore1StorageUser"
    path          = "/"
    tags_all      = {
        "Description" = "Deployed by Stackmate"
        "Environment" = "production"
    }
    unique_id     = "AIDA4BFUYYPDV3ATLISGG"
}

# aws_iam_user_policy_attachment.aws_objectstore_1_policy_attachment:
resource "aws_iam_user_policy_attachment" "aws_objectstore_1_policy_attachment" {
    id         = "StackmateAwsObjectstore1StorageUser-20231119152155202600000001"
    policy_arn = "arn:aws:iam::827160314823:policy/AwsObjectstore1S3Policy"
    user       = "StackmateAwsObjectstore1StorageUser"
}

# aws_kms_key.aws_provider_1_key:
resource "aws_kms_key" "aws_provider_1_key" {
    arn                                = "arn:aws:kms:eu-central-1:827160314823:key/e7c5b01c-b505-47c9-8576-3955c0cee02c"
    bypass_policy_lockout_safety_check = false
    customer_master_key_spec           = "SYMMETRIC_DEFAULT"
    deletion_window_in_days            = 30
    description                        = "Stackmate default encryption key"
    enable_key_rotation                = false
    id                                 = "e7c5b01c-b505-47c9-8576-3955c0cee02c"
    is_enabled                         = true
    key_id                             = "e7c5b01c-b505-47c9-8576-3955c0cee02c"
    key_usage                          = "ENCRYPT_DECRYPT"
    multi_region                       = false
    policy                             = jsonencode(
        {
            Id        = "key-default-1"
            Statement = [
                {
                    Action    = "kms:*"
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::827160314823:root"
                    }
                    Resource  = "*"
                    Sid       = "Enable IAM User Permissions"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    tags_all                           = {
        "Description" = "Deployed by Stackmate"
        "Environment" = "production"
    }
}

# aws_s3_bucket.aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_1:
resource "aws_s3_bucket" "aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_1" {
    arn                         = "arn:aws:s3:::stackmate-e2e-bucket-test-1"
    bucket                      = "stackmate-e2e-bucket-test-1"
    bucket_domain_name          = "stackmate-e2e-bucket-test-1.s3.amazonaws.com"
    bucket_regional_domain_name = "stackmate-e2e-bucket-test-1.s3.eu-central-1.amazonaws.com"
    force_destroy               = false
    hosted_zone_id              = "Z21DNDUVLTQW6Q"
    id                          = "stackmate-e2e-bucket-test-1"
    object_lock_enabled         = false
    region                      = "eu-central-1"
    request_payer               = "BucketOwner"
    tags_all                    = {}

    grant {
        id          = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
        permissions = [
            "FULL_CONTROL",
        ]
        type        = "CanonicalUser"
    }

    server_side_encryption_configuration {
        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

    versioning {
        enabled    = false
        mfa_delete = false
    }
}

# aws_s3_bucket.aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_2:
resource "aws_s3_bucket" "aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_2" {
    arn                         = "arn:aws:s3:::stackmate-e2e-bucket-test-2"
    bucket                      = "stackmate-e2e-bucket-test-2"
    bucket_domain_name          = "stackmate-e2e-bucket-test-2.s3.amazonaws.com"
    bucket_regional_domain_name = "stackmate-e2e-bucket-test-2.s3.eu-central-1.amazonaws.com"
    force_destroy               = false
    hosted_zone_id              = "Z21DNDUVLTQW6Q"
    id                          = "stackmate-e2e-bucket-test-2"
    object_lock_enabled         = false
    region                      = "eu-central-1"
    request_payer               = "BucketOwner"
    tags_all                    = {}

    grant {
        id          = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
        permissions = [
            "FULL_CONTROL",
        ]
        type        = "CanonicalUser"
    }

    server_side_encryption_configuration {
        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

    versioning {
        enabled    = false
        mfa_delete = false
    }
}

# aws_s3_bucket_acl.aws_objectstore_1_stackmate_e_2_e_bucket_test_1_acl:
resource "aws_s3_bucket_acl" "aws_objectstore_1_stackmate_e_2_e_bucket_test_1_acl" {
    acl    = "private"
    bucket = "stackmate-e2e-bucket-test-1"
    id     = "stackmate-e2e-bucket-test-1,private"

    access_control_policy {
        grant {
            permission = "FULL_CONTROL"

            grantee {
                id   = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
                type = "CanonicalUser"
            }
        }
        owner {
            id = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
        }
    }
}

# aws_s3_bucket_acl.aws_objectstore_1_stackmate_e_2_e_bucket_test_2_acl:
resource "aws_s3_bucket_acl" "aws_objectstore_1_stackmate_e_2_e_bucket_test_2_acl" {
    acl    = "private"
    bucket = "stackmate-e2e-bucket-test-2"
    id     = "stackmate-e2e-bucket-test-2,private"

    access_control_policy {
        grant {
            permission = "FULL_CONTROL"

            grantee {
                id   = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
                type = "CanonicalUser"
            }
        }
        owner {
            id = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
        }
    }
}

# aws_s3_bucket_ownership_controls.aws_objectstore_1_stackmate_e_2_e_bucket_test_1_ownership:
resource "aws_s3_bucket_ownership_controls" "aws_objectstore_1_stackmate_e_2_e_bucket_test_1_ownership" {
    bucket = "stackmate-e2e-bucket-test-1"
    id     = "stackmate-e2e-bucket-test-1"

    rule {
        object_ownership = "BucketOwnerPreferred"
    }
}

# aws_s3_bucket_ownership_controls.aws_objectstore_1_stackmate_e_2_e_bucket_test_2_ownership:
resource "aws_s3_bucket_ownership_controls" "aws_objectstore_1_stackmate_e_2_e_bucket_test_2_ownership" {
    bucket = "stackmate-e2e-bucket-test-2"
    id     = "stackmate-e2e-bucket-test-2"

    rule {
        object_ownership = "BucketOwnerPreferred"
    }
}

# aws_s3_bucket_server_side_encryption_configuration.aws_objectstore_1_stackmate_e_2_e_bucket_test_2_encryption:
resource "aws_s3_bucket_server_side_encryption_configuration" "aws_objectstore_1_stackmate_e_2_e_bucket_test_2_encryption" {
    bucket = "stackmate-e2e-bucket-test-2"
    id     = "stackmate-e2e-bucket-test-2"

    rule {
        apply_server_side_encryption_by_default {
            kms_master_key_id = "arn:aws:kms:eu-central-1:827160314823:key/e7c5b01c-b505-47c9-8576-3955c0cee02c"
            sse_algorithm     = "aws:kms"
        }
    }
}

# aws_s3_bucket_versioning.aws_objectstore_1_stackmate_e_2_e_bucket_test_1_versioning:
resource "aws_s3_bucket_versioning" "aws_objectstore_1_stackmate_e_2_e_bucket_test_1_versioning" {
    bucket = "stackmate-e2e-bucket-test-1"
    id     = "stackmate-e2e-bucket-test-1"

    versioning_configuration {
        status = "Disabled"
    }
}

# aws_s3_bucket_versioning.aws_objectstore_1_stackmate_e_2_e_bucket_test_2_versioning:
resource "aws_s3_bucket_versioning" "aws_objectstore_1_stackmate_e_2_e_bucket_test_2_versioning" {
    bucket = "stackmate-e2e-bucket-test-2"
    id     = "stackmate-e2e-bucket-test-2"

    versioning_configuration {
        status = "Enabled"
    }
}


Outputs:

aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_1_domain_name = "stackmate-e2e-bucket-test-1.s3.amazonaws.com"
aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_1_regional_domain_name = "stackmate-e2e-bucket-test-1.s3.eu-central-1.amazonaws.com"
aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_2_domain_name = "stackmate-e2e-bucket-test-2.s3.amazonaws.com"
aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_2_regional_domain_name = "stackmate-e2e-bucket-test-2.s3.eu-central-1.amazonaws.com"
aws_provider_1_kms_key_id = "arn:aws:kms:eu-central-1:827160314823:key/e7c5b01c-b505-47c9-8576-3955c0cee02c"

main.tftest.hcl... [37mtearing down[0m
[0mmain.tftest.hcl... [32mpass[0m[0m

[32mSuccess![0m[0m 1 passed, 0 failed.

[0m[1mInitializing the backend...[0m
[0m[0m[1mBackend configuration changed![0m

Terraform has detected that the configuration specified for the backend
has changed. Terraform will now check for existing state in the backends.
[0m
[0m[32m
Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.[0m

[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.25.0

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
main.tftest.hcl... [37min progress[0m
[0m  run "end-to-end"... [32mpass[0m[0m

# data.aws_caller_identity.aws_provider_1_account_id:
data "aws_caller_identity" "aws_provider_1_account_id" {
    account_id = "827160314823"
    arn        = "arn:aws:sts::827160314823:assumed-role/StackmateEngineTestsRunner/aws-go-sdk-1700471955308959000"
    id         = "827160314823"
    user_id    = "AROA4BFUYYPDZXP6PM6RM:aws-go-sdk-1700471955308959000"
}

# data.aws_iam_policy_document.aws_objectstore_1_policy_document:
data "aws_iam_policy_document" "aws_objectstore_1_policy_document" {
    id      = "1578046606"
    json    = jsonencode(
        {
            Statement = [
                {
                    Action   = "s3:ListBucket"
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:s3:::stackmate-e2e-bucket-test-2",
                        "arn:aws:s3:::stackmate-e2e-bucket-test-1",
                    ]
                    Sid      = "ListObjectsInBucket"
                },
                {
                    Action   = "s3:*Object"
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:s3:::stackmate-e2e-bucket-test-2/*",
                        "arn:aws:s3:::stackmate-e2e-bucket-test-1/*",
                    ]
                    Sid      = "AllObjectActions"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version = "2012-10-17"

    statement {
        actions       = [
            "s3:ListBucket",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:s3:::stackmate-e2e-bucket-test-1",
            "arn:aws:s3:::stackmate-e2e-bucket-test-2",
        ]
        sid           = "ListObjectsInBucket"
    }
    statement {
        actions       = [
            "s3:*Object",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:s3:::stackmate-e2e-bucket-test-1/*",
            "arn:aws:s3:::stackmate-e2e-bucket-test-2/*",
        ]
        sid           = "AllObjectActions"
    }
}

# aws_iam_policy.aws_objectstore_1_policy:
resource "aws_iam_policy" "aws_objectstore_1_policy" {
    arn         = "arn:aws:iam::827160314823:policy/AwsObjectstore1S3Policy"
    description = "S3 User Policy"
    id          = "arn:aws:iam::827160314823:policy/AwsObjectstore1S3Policy"
    name        = "AwsObjectstore1S3Policy"
    path        = "/"
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = "s3:ListBucket"
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:s3:::stackmate-e2e-bucket-test-2",
                        "arn:aws:s3:::stackmate-e2e-bucket-test-1",
                    ]
                    Sid      = "ListObjectsInBucket"
                },
                {
                    Action   = "s3:*Object"
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:s3:::stackmate-e2e-bucket-test-2/*",
                        "arn:aws:s3:::stackmate-e2e-bucket-test-1/*",
                    ]
                    Sid      = "AllObjectActions"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id   = "ANPA4BFUYYPD5I75MXM3I"
    tags_all    = {}
}

# aws_iam_user.aws_objectstore_1_user:
resource "aws_iam_user" "aws_objectstore_1_user" {
    arn           = "arn:aws:iam::827160314823:user/StackmateAwsObjectstore1StorageUser"
    force_destroy = false
    id            = "StackmateAwsObjectstore1StorageUser"
    name          = "StackmateAwsObjectstore1StorageUser"
    path          = "/"
    tags_all      = {
        "Description" = "Deployed by Stackmate"
        "Environment" = "production"
    }
    unique_id     = "AIDA4BFUYYPDUZ427QRNI"
}

# aws_iam_user_policy_attachment.aws_objectstore_1_policy_attachment:
resource "aws_iam_user_policy_attachment" "aws_objectstore_1_policy_attachment" {
    id         = "StackmateAwsObjectstore1StorageUser-20231120091921705700000001"
    policy_arn = "arn:aws:iam::827160314823:policy/AwsObjectstore1S3Policy"
    user       = "StackmateAwsObjectstore1StorageUser"
}

# aws_kms_key.aws_provider_1_key:
resource "aws_kms_key" "aws_provider_1_key" {
    arn                                = "arn:aws:kms:eu-central-1:827160314823:key/2c99d7a5-ff61-403f-88ca-b1fb97735a5d"
    bypass_policy_lockout_safety_check = false
    customer_master_key_spec           = "SYMMETRIC_DEFAULT"
    deletion_window_in_days            = 30
    description                        = "Stackmate default encryption key"
    enable_key_rotation                = false
    id                                 = "2c99d7a5-ff61-403f-88ca-b1fb97735a5d"
    is_enabled                         = true
    key_id                             = "2c99d7a5-ff61-403f-88ca-b1fb97735a5d"
    key_usage                          = "ENCRYPT_DECRYPT"
    multi_region                       = false
    policy                             = jsonencode(
        {
            Id        = "key-default-1"
            Statement = [
                {
                    Action    = "kms:*"
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::827160314823:root"
                    }
                    Resource  = "*"
                    Sid       = "Enable IAM User Permissions"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    tags_all                           = {
        "Description" = "Deployed by Stackmate"
        "Environment" = "production"
    }
}

# aws_s3_bucket.aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_1:
resource "aws_s3_bucket" "aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_1" {
    arn                         = "arn:aws:s3:::stackmate-e2e-bucket-test-1"
    bucket                      = "stackmate-e2e-bucket-test-1"
    bucket_domain_name          = "stackmate-e2e-bucket-test-1.s3.amazonaws.com"
    bucket_regional_domain_name = "stackmate-e2e-bucket-test-1.s3.eu-central-1.amazonaws.com"
    force_destroy               = false
    hosted_zone_id              = "Z21DNDUVLTQW6Q"
    id                          = "stackmate-e2e-bucket-test-1"
    object_lock_enabled         = false
    region                      = "eu-central-1"
    request_payer               = "BucketOwner"
    tags_all                    = {}

    grant {
        id          = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
        permissions = [
            "FULL_CONTROL",
        ]
        type        = "CanonicalUser"
    }

    server_side_encryption_configuration {
        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

    versioning {
        enabled    = false
        mfa_delete = false
    }
}

# aws_s3_bucket.aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_2:
resource "aws_s3_bucket" "aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_2" {
    arn                         = "arn:aws:s3:::stackmate-e2e-bucket-test-2"
    bucket                      = "stackmate-e2e-bucket-test-2"
    bucket_domain_name          = "stackmate-e2e-bucket-test-2.s3.amazonaws.com"
    bucket_regional_domain_name = "stackmate-e2e-bucket-test-2.s3.eu-central-1.amazonaws.com"
    force_destroy               = false
    hosted_zone_id              = "Z21DNDUVLTQW6Q"
    id                          = "stackmate-e2e-bucket-test-2"
    object_lock_enabled         = false
    region                      = "eu-central-1"
    request_payer               = "BucketOwner"
    tags_all                    = {}

    grant {
        id          = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
        permissions = [
            "FULL_CONTROL",
        ]
        type        = "CanonicalUser"
    }

    server_side_encryption_configuration {
        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

    versioning {
        enabled    = false
        mfa_delete = false
    }
}

# aws_s3_bucket_acl.aws_objectstore_1_stackmate_e_2_e_bucket_test_1_acl:
resource "aws_s3_bucket_acl" "aws_objectstore_1_stackmate_e_2_e_bucket_test_1_acl" {
    acl    = "private"
    bucket = "stackmate-e2e-bucket-test-1"
    id     = "stackmate-e2e-bucket-test-1,private"

    access_control_policy {
        grant {
            permission = "FULL_CONTROL"

            grantee {
                id   = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
                type = "CanonicalUser"
            }
        }
        owner {
            id = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
        }
    }
}

# aws_s3_bucket_acl.aws_objectstore_1_stackmate_e_2_e_bucket_test_2_acl:
resource "aws_s3_bucket_acl" "aws_objectstore_1_stackmate_e_2_e_bucket_test_2_acl" {
    acl    = "private"
    bucket = "stackmate-e2e-bucket-test-2"
    id     = "stackmate-e2e-bucket-test-2,private"

    access_control_policy {
        grant {
            permission = "FULL_CONTROL"

            grantee {
                id   = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
                type = "CanonicalUser"
            }
        }
        owner {
            id = "8bc198ecc0c552e8b44bd32428ae5aea925afc9ea1ffe10cbfa64cb0aa6ddc85"
        }
    }
}

# aws_s3_bucket_ownership_controls.aws_objectstore_1_stackmate_e_2_e_bucket_test_1_ownership:
resource "aws_s3_bucket_ownership_controls" "aws_objectstore_1_stackmate_e_2_e_bucket_test_1_ownership" {
    bucket = "stackmate-e2e-bucket-test-1"
    id     = "stackmate-e2e-bucket-test-1"

    rule {
        object_ownership = "BucketOwnerPreferred"
    }
}

# aws_s3_bucket_ownership_controls.aws_objectstore_1_stackmate_e_2_e_bucket_test_2_ownership:
resource "aws_s3_bucket_ownership_controls" "aws_objectstore_1_stackmate_e_2_e_bucket_test_2_ownership" {
    bucket = "stackmate-e2e-bucket-test-2"
    id     = "stackmate-e2e-bucket-test-2"

    rule {
        object_ownership = "BucketOwnerPreferred"
    }
}

# aws_s3_bucket_server_side_encryption_configuration.aws_objectstore_1_stackmate_e_2_e_bucket_test_2_encryption:
resource "aws_s3_bucket_server_side_encryption_configuration" "aws_objectstore_1_stackmate_e_2_e_bucket_test_2_encryption" {
    bucket = "stackmate-e2e-bucket-test-2"
    id     = "stackmate-e2e-bucket-test-2"

    rule {
        apply_server_side_encryption_by_default {
            kms_master_key_id = "arn:aws:kms:eu-central-1:827160314823:key/2c99d7a5-ff61-403f-88ca-b1fb97735a5d"
            sse_algorithm     = "aws:kms"
        }
    }
}

# aws_s3_bucket_versioning.aws_objectstore_1_stackmate_e_2_e_bucket_test_1_versioning:
resource "aws_s3_bucket_versioning" "aws_objectstore_1_stackmate_e_2_e_bucket_test_1_versioning" {
    bucket = "stackmate-e2e-bucket-test-1"
    id     = "stackmate-e2e-bucket-test-1"

    versioning_configuration {
        status = "Disabled"
    }
}

# aws_s3_bucket_versioning.aws_objectstore_1_stackmate_e_2_e_bucket_test_2_versioning:
resource "aws_s3_bucket_versioning" "aws_objectstore_1_stackmate_e_2_e_bucket_test_2_versioning" {
    bucket = "stackmate-e2e-bucket-test-2"
    id     = "stackmate-e2e-bucket-test-2"

    versioning_configuration {
        status = "Enabled"
    }
}


Outputs:

aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_1_domain_name = "stackmate-e2e-bucket-test-1.s3.amazonaws.com"
aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_1_regional_domain_name = "stackmate-e2e-bucket-test-1.s3.eu-central-1.amazonaws.com"
aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_2_domain_name = "stackmate-e2e-bucket-test-2.s3.amazonaws.com"
aws_objectstore_1_bucket_stackmate_e_2_e_bucket_test_2_regional_domain_name = "stackmate-e2e-bucket-test-2.s3.eu-central-1.amazonaws.com"
aws_provider_1_kms_key_id = "arn:aws:kms:eu-central-1:827160314823:key/2c99d7a5-ff61-403f-88ca-b1fb97735a5d"

main.tftest.hcl... [37mtearing down[0m
[0mmain.tftest.hcl... [32mpass[0m[0m

[32mSuccess![0m[0m 1 passed, 0 failed.
