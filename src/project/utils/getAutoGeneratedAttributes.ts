import { PROVIDER, SERVICE_TYPE } from '@src/constants'
import { isFunction } from 'lodash'
import { DEFAULT_PROVIDER } from '@src/project/constants'
import type { ServiceConfiguration } from '@src/services/registry'
import type { BaseServiceAttributes, ServiceTypeChoice } from '@src/services/types'
import type { ProjectConfiguration } from '@src/project/types'

export type AttributesGenerator = (
  project: ProjectConfiguration,
  associated?: BaseServiceAttributes,
) => ServiceConfiguration

const ATTRIBUTE_GENERATOR: Map<ServiceTypeChoice, AttributesGenerator> = new Map([
  [
    SERVICE_TYPE.STATE,
    (project) => ({
      ...project.state,
      type: SERVICE_TYPE.STATE,
      provider: project.state.provider || project.provider || PROVIDER.AWS,
      name: 'project-state',
    }),
  ],
])

export const getAutoGeneratedAttributes = (
  type: ServiceTypeChoice,
  project: ProjectConfiguration,
  associatedServiceConfig?: BaseServiceAttributes,
): ServiceConfiguration => {
  const generator = ATTRIBUTE_GENERATOR.get(type)
  const generated = isFunction(generator) ? generator(project, associatedServiceConfig) : null

  const provider = associatedServiceConfig?.provider || project.provider || DEFAULT_PROVIDER
  const region = associatedServiceConfig?.region || project.region
  const requiredServiceName = `${provider}-${type}-service`

  return {
    name: requiredServiceName,
    provider,
    type,
    region,
    ...generated,
  } as ServiceConfiguration
}
